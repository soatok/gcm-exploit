<?php

namespace Soatok\GCMCollider\Tests;

use Aws\Crypto\Polyfill\ByteArray;
use Aws\Crypto\Polyfill\Key;
use PHPUnit\Framework\TestCase;
use Soatok\GCMCollider\GF128;

/**
 * @covers GF128
 */
class GF128Test extends TestCase
{
    protected GF128 $gf;

    public function __construct(?string $name = null, array $data = [], $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->gf = new GF128(
            new Key(random_bytes(32)),
            random_bytes(12) . "\0\0\0\x01"
        );
    }

    public function powerProvider(): array
    {
        return [
            [0,   '80000000000000000000000000000000'],
            [1,   '40000000000000000000000000000000'],
            [2,   '20000000000000000000000000000000'],
            [3,   '10000000000000000000000000000000'],
            [4,   '08000000000000000000000000000000'],
            [5,   '04000000000000000000000000000000'],
            [6,   '02000000000000000000000000000000'],
            [7,   '01000000000000000000000000000000'],
            [8,   '00800000000000000000000000000000'],
            [15,  '00010000000000000000000000000000'],
            [16,  '00008000000000000000000000000000'],
            [23,  '00000100000000000000000000000000'],
            [24,  '00000080000000000000000000000000'],
            [32,  '00000000800000000000000000000000'],
            [40,  '00000000008000000000000000000000'],
            [48,  '00000000000080000000000000000000'],
            [64,  '00000000000000008000000000000000'],
            [72,  '00000000000000000080000000000000'],
            [80,  '00000000000000000000800000000000'],
            [88,  '00000000000000000000008000000000'],
            [96,  '00000000000000000000000080000000'],
            [104, '00000000000000000000000000800000'],
            [112, '00000000000000000000000000008000'],
            [120, '00000000000000000000000000000080'],
            [124, '00000000000000000000000000000008'],
            [125, '00000000000000000000000000000004'],
            [126, '00000000000000000000000000000002'],
            [127, '00000000000000000000000000000001'],
        ];
    }

    /**
     * @dataProvider powerProvider
     */
    public function testPowerOfX(int $n, string $encoded): void
    {
        $this->assertSame(
            $encoded,
            bin2hex(GF128::powerOfX($n)->toString())
        );
    }

    /**
     * @dataProvider powerProvider
     */
    public function testDegree(int $n, string $encoded): void
    {
        $ba = new ByteArray(hex2bin($encoded));
        $this->assertSame($n, GF128::degree($ba));
    }

    public function inverseProvider(): array
    {
        return [
            ['13370000000000000000000000000000', '1fb4c83b14fb36f27203ab92eb221a2b'],
        ];
    }

    // 31, 180, 200, 59, 20, 251, 54, 242, 114, 3, 171, 146, 235, 34, 26, 43,
    // $GF = new GF128(new Ae random_bytes(12))

    /**
     * @dataProvider inverseProvider
     */
    public function testInverse(string $in, string $out): void
    {
        $inArr = new ByteArray(hex2bin($in));
        // $outArr = new ByteArray(hex2bin($out));

        $inverse = $this->gf->inverse($inArr);
        $this->assertSame(
            $out,
            bin2hex($inverse->toString())
        );
    }

    /**
     * Verifies the attack in a single-block setup
     */
    public function testVectors(): void
    {
        $iv = hex2bin('7e08edf680a380bd04576ed8');
        $key = hex2bin('067e82a2110cb25f5cdc2f18467ad0f8660e183b915bf16be9b0cb12cc06efc7');
        $h = new ByteArray(
            \openssl_encrypt(
                \str_repeat("\0", 16),
                "aes-256-ecb",
                $key,
                OPENSSL_RAW_DATA | OPENSSL_NO_PADDING
            )
        );
        // $key2 = hex2bin('970a7ddcdcace949b7eea5f6a3c304641df79357be4183d367fb46ace4d4dacd');

        $authKey1 = new ByteArray(hex2bin('32fb0bfca47dc2cf0482f2df186afafe'));
        $authKey2 =  new ByteArray(hex2bin('e233cd3f7fbac416fec7fca1b33c2001'));

        $authKey1sq = $this->gf->multBlocks($authKey1, $authKey1);
        $this->assertSame('66900b84c45060b05f451c1d643364a9', bin2hex($authKey1sq->toString()), 'authKey1sq');
        $authKey2sq = $this->gf->multBlocks($authKey2, $authKey2);
        $this->assertSame('9a03837fa0afa5b9423313c5ee30022b', bin2hex($authKey2sq->toString()), 'authKey2sq');
        $authKey1cb = $this->gf->multBlocks($authKey1sq, $authKey1);
        $this->assertSame('bbce2051d54b01f0462a444e4c4f9210', bin2hex($authKey1cb->toString()), 'authKey1cb');
        $authKey2cb = $this->gf->multBlocks($authKey2sq, $authKey2);
        $this->assertSame('1f52499db5c9f3452fb6b08553eee85c', bin2hex($authKey2cb->toString()), 'authKey2cb');


        $lhs = $authKey1sq->exclusiveOr($authKey2sq);
        $this->assertSame('fc9388fb64ffc5091d760fd88a036682', bin2hex($lhs->toString()), 'lhs');

        $invLhs = $this->gf->inverse($lhs);
        $this->assertSame('337b30b31392d630d49066a617d7d938', bin2hex($invLhs->toString()), 'inverse(lhs)');

        $tagBlock1 = new ByteArray(hex2bin('162b1c980cd2959b247628ec9a422160'));
        $tagBlock2 = new ByteArray(hex2bin('9f08eb3ea15377c45307b59e6e6e566c'));

        $xor = $tagBlock1->exclusiveOr($tagBlock2);
        $this->assertSame('8923f7a6ad81e25f77719d72f42c770c', bin2hex($xor->toString()));

        $lengthBlock = new ByteArray(hex2bin('00000000000000000000000000000100'));
        // rhs = add(rhs, mul(lengthBlock, add(authKey1, authKey2)));
        $rhs = $xor->exclusiveOr(
            $this->gf->multBlocks(
                $lengthBlock,
                $authKey1->exclusiveOr($authKey2)
            )
        );
        $this->assertSame('7528c9286815ffcb73f01820097563d1', bin2hex($rhs->toString()), 'rhs 1');
        // rhs = add(rhs, mul(ciphertext1, add(authKey1cb, authKey2cb)));

        $ciphertext1 = new ByteArray(hex2bin('c7966eebe31453dfb9f0bf85aded08a3'));

        $rhs = $rhs->exclusiveOr(
            $this->gf->multBlocks(
                $ciphertext1,
                $authKey1cb->exclusiveOr($authKey2cb)
            )
        );
        $this->assertSame('b636ac351ebe6911ff484cedeceab928', bin2hex($rhs->toString()), 'rhs 2');

        $ciphertext2 = $this->gf->multBlocks($invLhs, $rhs);
        $this->assertSame('5384201ab64056148a5fde06f29a7bf8', bin2hex($ciphertext2->toString()), 'ciphertext 2');

        $attack = new ByteArray(
            $ciphertext1->toString() .
            $ciphertext2->toString()
        );

        $ghash = (new GF128(new Key($key), $iv . "\x00\x00\x00\x01"))
            ->update($attack)
            ->finish(0, 32)
            ->exclusiveOr($tagBlock1);
        $this->assertSame('9e69d7a73276792b4a970e408d9f269e', bin2hex($ghash->toString()), 'ghash');
    }
}