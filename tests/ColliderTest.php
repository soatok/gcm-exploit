<?php
declare(strict_types=1);
namespace Soatok\GCMCollider\Tests;

use Aws\Crypto\Polyfill\Key;
use PHPUnit\Framework\TestCase;
use Soatok\GCMCollider\Collider;

/**
 * @covers Collider
 */
class ColliderTest extends TestCase
{
    public function testBasicEncryptionFunctionality()
    {
        $collider = new Collider();
        $key = new Key(random_bytes(32));

        $plain = 'This is a testing message to ensure correctness';
        $cipher = $collider->encrypt($key, $plain);
        $decrypt = $collider->decrypt($key, $cipher);
        $this->assertSame($decrypt, $plain);
    }

    const PLAIN_A = "Be sure to drink your Ovaltine!\n";
    const PLAIN_B =  "\nThe username is \"AgentDhole07\".";

    public function testGenerateUncool()
    {
        $collider = new Collider();
        $payload = $collider->generateUncool(self::PLAIN_A, self::PLAIN_B);
        $keys = $collider->getKeyObjects();

        $this->assertSame(2, count($keys));
        try {
            $decryptA = $collider->decrypt($keys['alice'], $payload);
        } catch (\Throwable $e) {
            echo 'Decrypt A failed', PHP_EOL;
            throw $e;
        }
        $this->assertStringContainsString(bin2hex(self::PLAIN_A), bin2hex($decryptA));

        try {
            $decryptB = $collider->decrypt($keys['bob'], $payload);
        } catch (\Throwable $e) {
            echo 'Decrypt B failed - collision not working', PHP_EOL;
            throw $e;
        }
        $this->assertStringContainsString(bin2hex(self::PLAIN_B), bin2hex($decryptB));
    }
}
