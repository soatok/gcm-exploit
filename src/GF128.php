<?php
declare(strict_types=1);
namespace Soatok\GCMCollider;

use Aws\Crypto\Polyfill\ByteArray;
use Aws\Crypto\Polyfill\Gmac;
use Exception;

class GF128 extends Gmac
{
    public function replaceH(ByteArray $h): static
    {
        $this->h = clone $h;
        return $this;
    }

    public function replaceHF(ByteArray $hf): static
    {
        $this->hf = clone $hf;
        return $this;
    }

    public static function add(ByteArray $a, ByteArray $b)
    {
        return $a->exclusiveOr($b);
    }

    public function mul(ByteArray $in): ByteArray
    {
        if ($in->count() !== 16) {
            throw new \RangeException('Must be 16 bytes; ' . $in->count() . ' given.');
        }
        return $this->blockMultiply($this->h, $in);
    }

    public function squareKey(): ByteArray
    {
        return $this->blockMultiply($this->h, $this->h);
    }

    /**
     * @throws Exception
     */
    public static function degree(ByteArray $in): int
    {
        if ($in->count() !== 16) {
            throw new Exception('Block size wrong!');
        }
        for ($i = 0; $i < 16; ++$i) {
            for ($j = 0; $j < 8; ++$j) {
                $mask = 1 << $j;
                if (($mask & $in[15 - $i]) == $mask) {
                    return 8 * (15 - $i) + 7 - $j;
                }
            }
        }
        return -1;
    }

    public static function powerOfX(int $n): ByteArray
    {
        $res = new ByteArray(16);
        $res[$n >> 3] = (0x01 << (7 - ($n % 8))) & 0xff;
        return $res;
    }

    /**
     * @throws Exception
     */
    public function inverse(ByteArray $a): ByteArray
    {
        if ($a->count() !== 16) {
            throw new Exception('Block size wrong!');
        }
        $deg = self::degree($a);
        if ($deg < 0) {
            throw new Exception('Division by zero!');
        }
        if ($deg === 0) {
            return $a;
        }

        $a = clone $a;
        $x = self::powerOfX(0);
        $y = self::powerOfX(128 - $deg);
        $b = $this->blockMultiply($a, $y);

        $iter = 0;
        while ($deg > 0) {
            ++$iter;
            $degb = self::degree($b);
            if ($deg > $degb) {
                [$a, $b] = [clone $b, clone $a];
                [$x, $y] = [clone $y, clone $x];
                [$deg, $degb] = [$degb, $deg];
            }
            $pwr = self::powerOfX($degb - $deg);
            $b = $b->exclusiveOr(
                $this->blockMultiply($a, $pwr)
            );
            $y = $y->exclusiveOr(
                $this->blockMultiply($x, $pwr)
            );
        }
        return $x;
    }

    public function multBlocks(ByteArray $x, ByteArray $h): ByteArray
    {
        return $this->blockMultiply($x, $h);
    }

    public function getAuthKey(): ByteArray
    {
        return clone $this->h;
    }

    public function getTagBlock(): ByteArray
    {
        return clone $this->hf;
    }
}
